# 위의 그래프를 예시로 삼아서 인접 리스트 방식으로 표현했습니다!
import time

# 딕셔너리 안에 리스트
graph = {
    1: [2, 5, 9],
    2: [1, 3],
    3: [2, 4],
    4: [3],
    5: [1, 6, 8],
    6: [5, 7],
    7: [6],
    8: [5],
    9: [1, 10],
    10: [9]
    # 1: [2, 5, 9],
    # 2: [1, 3],
    # 3: [2, 4],
    # 4: [3, 11],
    # 5: [1, 6, 8],
    # 6: [5, 7, 12],
    # 7: [6, 13],
    # 8: [5, 14],
    # 9: [1, 10, 15],
    # 10: [9, 16],
    # 11: [4, 17],
    # 12: [6],
    # 13: [7, 18],
    # 14: [8],
    # 15: [9, 19],
    # 16: [10],
    # 17: [11, 20],
    # 18: [13],
    # 19: [15, 21, 23],
    # 20: [17, 22],
    # 21: [19, 24],
    # 22: [20],
    # 23: [19, 25],
    # 24: [21, 26, 28, 29, 34],
    # 25: [23, 27],
    # 26: [24, 30, 33],
    # 27: [25],
    # 28: [24, 31],
    # 29: [24],
    # 30: [26, 35],
    # 31: [28, 32],
    # 32: [31],
    # 33: [26, 36],
    # 34: [24, 37, 38],
    # 35: [30],
    # 36: [33, 39, 45, 46],
    # 37: [34, 40, 47],
    # 38: [34],
    # 39: [36, 42],
    # 40: [37, 41, 44],
    # 41: [40, 43],
    # 42: [39],
    # 43: [41, 48],
    # 44: [40],
    # 45: [36],
    # 46: [36],
    # 47: [37],
    # 48: [43]
}
visited = []

# 1. 루트 노드부터 시작한다.
# 2. 현재 방문한 노드를 visited 에 추가한다.
# 3. 현재 방문한 노드와 인접한 노드 중 방문하지 않은 노드에 방문한다.
# 4. 2부터 반복한다.
def dfs_recursion(adjacent_graph, cur_node, visited_array):
    # 현재 방문한 노드를 visited 에 추가한다.
    visited_array.append(cur_node)

    # (현재 방문한 노드와) 인접한 노드 중 방문하지 않은 노드에 방문한다.
    for adjacent_node in adjacent_graph[cur_node]:
        #print(adjacent_node)
        if adjacent_node not in visited_array:
            dfs_recursion(adjacent_graph, adjacent_node, visited_array)
    return


# 방문 순서대로 출력
start = time.time()
dfs_recursion(graph, 1, visited)  # 1 이 시작노드입니다!
print(visited)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 이 출력되어야 합니다!
print("시간 : ", time.time() - start)